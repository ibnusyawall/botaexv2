"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postToImgbb = void 0;
var https = __importStar(require("https"));
var querystring = __importStar(require("querystring"));
/**
 * Now using the standard 'https' module instead of 'request' deprecated dependency.
 *
 * To tweak the method, edit 'postToImgbb.ts' with the help of [the docs](https://nodejs.org/api/https.html#https_https_request_options_callback)
 * @param {string} apiKey - Your imgBB API key
 * @param {string} base64string - Typically, the output of fileToString("path") function
 * @returns A promise. Use `.then` as shown in [the README](https://github.com/TheRealBarenziah/imgbb-uploader#use) :
 */
exports.postToImgbb = function (apiKey, base64str) {
    return new Promise(function (resolve, reject) {
        var payload = querystring.stringify({
            image: base64str,
        });
        var options = {
            hostname: "api.imgbb.com",
            method: "POST",
            timeout: 5000,
            path: "/1/upload?key=" + apiKey,
            headers: {
                Accept: "application/json",
                "Content-Type": "application/x-www-form-urlencoded",
                "Content-Length": payload.length,
            },
        };
        var req = https
            .request(options, function (res) {
            var response = "";
            res.on("data", function (d) {
                response += d;
            });
            res.on("end", function () {
                var output = JSON.parse(response).data;
                resolve(output);
            });
        })
            .on("error", function (err) {
            reject(err);
        });
        req.write(payload);
        req.end();
    });
};
